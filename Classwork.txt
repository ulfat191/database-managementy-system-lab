use employee_information_w2
GO

--grouping or aggregate functions
SELECT MAX(Salary) AS 'Max Salary', MIN(Salary) AS 'Min Salary'
FROM Employees

SELECT MAX(Salary), MIN(Salary)
FROM Employees
GROUP BY Department_id

SELECT Department_id, MAX(Salary), MIN(Salary), COUNT(*)
FROM Employees
GROUP BY Department_id
/*any other attribute will show if only used before aggregate functions*/
/*wrong output is shown as same department id can have multiple people*/
/*if we use any other function than the grouping clause it will return the first one only*/

SELECT Department_id, COUNT(*), ROUND(AVG(Salary), 2) AS 'Average Salary', ROUND(SUM(Salary), 2) AS 'Total Salary'
FROM Employees
GROUP BY Department_id

SELECT Department_id, COUNT(*), CEILING(AVG(Salary)) AS 'Average Salary', ROUND(SUM(Salary), 2) AS 'Total Salary'
FROM Employees
GROUP BY Department_id

SELECT Department_id, COUNT(*), FLOOR(AVG(Salary)) AS 'Average Salary', ROUND(SUM(Salary), 2) AS 'Total Salary'
FROM Employees
GROUP BY Department_id

SELECT Department_id, Job_Id, COUNT(Employee_Id) AS 'Total Employees', COUNT(Commission_pct) AS 'Total Commission Gainers'
FROM Employees
GROUP BY Department_id, Job_Id--will show in evey group 
/*Count function omits null values if used in invidual tables, but if given all(*) it will also count NULL */
/*Since count only does with primary key, primary key of a relation can never be NULL*/

SELECT  COUNT(Employee_Id) AS 'Total Employees', COUNT(Commission_pct) AS 'Total Commission Gainers'
FROM Employees

SELECT E.Department_id, Job_Id, MAX(E.Salary), MIN(E.Salary), COUNT(*)
FROM Employees E, Departments D
WHERE E.Department_id=D.Department_id
AND
E.Job_Id LIKE '%SA%'
GROUP BY E.Department_id, Job_Id
HAVING MAX(Salary)>10000
--ORDER BY Department_id
ORDER BY MAX(Salary)
--use the ones from select clause










